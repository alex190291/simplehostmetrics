/*
 * Nginx Proxy Manager API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.12.3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.67
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import AccesslistsListIDBody from '../model/AccesslistsListIDBody';
import InlineResponse2002 from '../model/InlineResponse2002';
import NginxAccesslistsBody from '../model/NginxAccesslistsBody';

/**
* AccessLists service.
* @module api/AccessListsApi
* @version 2.12.3
*/
export default class AccessListsApi {

    /**
    * Constructs a new AccessListsApi. 
    * @alias module:api/AccessListsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createAccessList operation.
     * @callback moduleapi/AccessListsApi~createAccessListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Access List
     * @param {module:model/NginxAccesslistsBody} body Access List Payload
     * @param {module:api/AccessListsApi~createAccessListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createAccessList(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAccessList");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/nginx/access-lists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteAccessList operation.
     * @callback moduleapi/AccessListsApi~deleteAccessListCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Access List
     * @param {Object} listID 
     * @param {module:api/AccessListsApi~deleteAccessListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteAccessList(listID, callback) {
      
      let postBody = null;
      // verify the required parameter 'listID' is set
      if (listID === undefined || listID === null) {
        throw new Error("Missing the required parameter 'listID' when calling deleteAccessList");
      }

      let pathParams = {
        'listID': listID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/nginx/access-lists/{listID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAccessList operation.
     * @callback moduleapi/AccessListsApi~getAccessListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a access List
     * @param {Object} listID 
     * @param {module:api/AccessListsApi~getAccessListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAccessList(listID, callback) {
      
      let postBody = null;
      // verify the required parameter 'listID' is set
      if (listID === undefined || listID === null) {
        throw new Error("Missing the required parameter 'listID' when calling getAccessList");
      }

      let pathParams = {
        'listID': listID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/nginx/access-lists/{listID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAccessLists operation.
     * @callback moduleapi/AccessListsApi~getAccessListsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all access lists
     * @param {Object} opts Optional parameters
     * @param {Object} opts.expand Expansions
     * @param {module:api/AccessListsApi~getAccessListsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAccessLists(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/nginx/access-lists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateAccessList operation.
     * @callback moduleapi/AccessListsApi~updateAccessListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Access List
     * @param {module:model/AccesslistsListIDBody} body Access List Payload
     * @param {Object} listID 
     * @param {module:api/AccessListsApi~updateAccessListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateAccessList(body, listID, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAccessList");
      }
      // verify the required parameter 'listID' is set
      if (listID === undefined || listID === null) {
        throw new Error("Missing the required parameter 'listID' when calling updateAccessList");
      }

      let pathParams = {
        'listID': listID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/nginx/access-lists/{listID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}