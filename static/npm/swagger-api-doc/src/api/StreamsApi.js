/*
 * Nginx Proxy Manager API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.12.3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.67
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import InlineResponse2014 from '../model/InlineResponse2014';
import InlineResponse400 from '../model/InlineResponse400';
import NginxStreamsBody from '../model/NginxStreamsBody';
import StreamsStreamIDBody from '../model/StreamsStreamIDBody';

/**
* Streams service.
* @module api/StreamsApi
* @version 2.12.3
*/
export default class StreamsApi {

    /**
    * Constructs a new StreamsApi. 
    * @alias module:api/StreamsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createStream operation.
     * @callback moduleapi/StreamsApi~createStreamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2014{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Stream
     * @param {module:model/NginxStreamsBody} body Stream Payload
     * @param {module:api/StreamsApi~createStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createStream(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createStream");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2014;

      return this.apiClient.callApi(
        '/nginx/streams', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteStream operation.
     * @callback moduleapi/StreamsApi~deleteStreamCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Stream
     * @param {Object} streamID 
     * @param {module:api/StreamsApi~deleteStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteStream(streamID, callback) {
      
      let postBody = null;
      // verify the required parameter 'streamID' is set
      if (streamID === undefined || streamID === null) {
        throw new Error("Missing the required parameter 'streamID' when calling deleteStream");
      }

      let pathParams = {
        'streamID': streamID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/nginx/streams/{streamID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the disableStream operation.
     * @callback moduleapi/StreamsApi~disableStreamCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable a Stream
     * @param {Object} streamID 
     * @param {module:api/StreamsApi~disableStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    disableStream(streamID, callback) {
      
      let postBody = null;
      // verify the required parameter 'streamID' is set
      if (streamID === undefined || streamID === null) {
        throw new Error("Missing the required parameter 'streamID' when calling disableStream");
      }

      let pathParams = {
        'streamID': streamID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/nginx/streams/{streamID}/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the enableStream operation.
     * @callback moduleapi/StreamsApi~enableStreamCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable a Stream
     * @param {Object} streamID 
     * @param {module:api/StreamsApi~enableStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    enableStream(streamID, callback) {
      
      let postBody = null;
      // verify the required parameter 'streamID' is set
      if (streamID === undefined || streamID === null) {
        throw new Error("Missing the required parameter 'streamID' when calling enableStream");
      }

      let pathParams = {
        'streamID': streamID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/nginx/streams/{streamID}/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getStream operation.
     * @callback moduleapi/StreamsApi~getStreamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2014{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Stream
     * @param {Object} streamID 
     * @param {module:api/StreamsApi~getStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getStream(streamID, callback) {
      
      let postBody = null;
      // verify the required parameter 'streamID' is set
      if (streamID === undefined || streamID === null) {
        throw new Error("Missing the required parameter 'streamID' when calling getStream");
      }

      let pathParams = {
        'streamID': streamID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2014;

      return this.apiClient.callApi(
        '/nginx/streams/{streamID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getStreams operation.
     * @callback moduleapi/StreamsApi~getStreamsCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all streams
     * @param {Object} opts Optional parameters
     * @param {Object} opts.expand Expansions
     * @param {module:api/StreamsApi~getStreamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getStreams(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/nginx/streams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateStream operation.
     * @callback moduleapi/StreamsApi~updateStreamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2014{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Stream
     * @param {module:model/StreamsStreamIDBody} body Stream Payload
     * @param {Object} streamID 
     * @param {module:api/StreamsApi~updateStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateStream(body, streamID, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateStream");
      }
      // verify the required parameter 'streamID' is set
      if (streamID === undefined || streamID === null) {
        throw new Error("Missing the required parameter 'streamID' when calling updateStream");
      }

      let pathParams = {
        'streamID': streamID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2014;

      return this.apiClient.callApi(
        '/nginx/streams/{streamID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}