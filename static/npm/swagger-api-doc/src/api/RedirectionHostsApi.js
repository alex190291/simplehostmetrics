/*
 * Nginx Proxy Manager API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.12.3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.67
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import InlineResponse2012 from '../model/InlineResponse2012';
import InlineResponse400 from '../model/InlineResponse400';
import NginxRedirectionhostsBody from '../model/NginxRedirectionhostsBody';
import RedirectionhostsHostIDBody from '../model/RedirectionhostsHostIDBody';

/**
* RedirectionHosts service.
* @module api/RedirectionHostsApi
* @version 2.12.3
*/
export default class RedirectionHostsApi {

    /**
    * Constructs a new RedirectionHostsApi. 
    * @alias module:api/RedirectionHostsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createRedirectionHost operation.
     * @callback moduleapi/RedirectionHostsApi~createRedirectionHostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2012{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Redirection Host
     * @param {module:model/NginxRedirectionhostsBody} body Redirection Host Payload
     * @param {module:api/RedirectionHostsApi~createRedirectionHostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createRedirectionHost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createRedirectionHost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2012;

      return this.apiClient.callApi(
        '/nginx/redirection-hosts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteRedirectionHost operation.
     * @callback moduleapi/RedirectionHostsApi~deleteRedirectionHostCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Redirection Host
     * @param {Object} hostID 
     * @param {module:api/RedirectionHostsApi~deleteRedirectionHostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteRedirectionHost(hostID, callback) {
      
      let postBody = null;
      // verify the required parameter 'hostID' is set
      if (hostID === undefined || hostID === null) {
        throw new Error("Missing the required parameter 'hostID' when calling deleteRedirectionHost");
      }

      let pathParams = {
        'hostID': hostID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/nginx/redirection-hosts/{hostID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the disableRedirectionHost operation.
     * @callback moduleapi/RedirectionHostsApi~disableRedirectionHostCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable a Redirection Host
     * @param {Object} hostID 
     * @param {module:api/RedirectionHostsApi~disableRedirectionHostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    disableRedirectionHost(hostID, callback) {
      
      let postBody = null;
      // verify the required parameter 'hostID' is set
      if (hostID === undefined || hostID === null) {
        throw new Error("Missing the required parameter 'hostID' when calling disableRedirectionHost");
      }

      let pathParams = {
        'hostID': hostID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/nginx/redirection-hosts/{hostID}/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the enableRedirectionHost operation.
     * @callback moduleapi/RedirectionHostsApi~enableRedirectionHostCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable a Redirection Host
     * @param {Object} hostID 
     * @param {module:api/RedirectionHostsApi~enableRedirectionHostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    enableRedirectionHost(hostID, callback) {
      
      let postBody = null;
      // verify the required parameter 'hostID' is set
      if (hostID === undefined || hostID === null) {
        throw new Error("Missing the required parameter 'hostID' when calling enableRedirectionHost");
      }

      let pathParams = {
        'hostID': hostID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/nginx/redirection-hosts/{hostID}/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getRedirectionHost operation.
     * @callback moduleapi/RedirectionHostsApi~getRedirectionHostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2012{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Redirection Host
     * @param {Object} hostID 
     * @param {module:api/RedirectionHostsApi~getRedirectionHostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getRedirectionHost(hostID, callback) {
      
      let postBody = null;
      // verify the required parameter 'hostID' is set
      if (hostID === undefined || hostID === null) {
        throw new Error("Missing the required parameter 'hostID' when calling getRedirectionHost");
      }

      let pathParams = {
        'hostID': hostID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2012;

      return this.apiClient.callApi(
        '/nginx/redirection-hosts/{hostID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getRedirectionHosts operation.
     * @callback moduleapi/RedirectionHostsApi~getRedirectionHostsCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Redirection hosts
     * @param {Object} opts Optional parameters
     * @param {Object} opts.expand Expansions
     * @param {module:api/RedirectionHostsApi~getRedirectionHostsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getRedirectionHosts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/nginx/redirection-hosts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateRedirectionHost operation.
     * @callback moduleapi/RedirectionHostsApi~updateRedirectionHostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2012{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Redirection Host
     * @param {module:model/RedirectionhostsHostIDBody} body Redirection Host       Payload
     * @param {Object} hostID 
     * @param {module:api/RedirectionHostsApi~updateRedirectionHostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateRedirectionHost(body, hostID, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateRedirectionHost");
      }
      // verify the required parameter 'hostID' is set
      if (hostID === undefined || hostID === null) {
        throw new Error("Missing the required parameter 'hostID' when calling updateRedirectionHost");
      }

      let pathParams = {
        'hostID': hostID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2012;

      return this.apiClient.callApi(
        '/nginx/redirection-hosts/{hostID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}