/*
 * Nginx Proxy Manager API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.12.3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.67
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import InlineResponse2003 from '../model/InlineResponse2003';
import InlineResponse2004 from '../model/InlineResponse2004';
import InlineResponse201 from '../model/InlineResponse201';
import InlineResponse400 from '../model/InlineResponse400';
import NginxCertificatesBody from '../model/NginxCertificatesBody';

/**
* Certificates service.
* @module api/CertificatesApi
* @version 2.12.3
*/
export default class CertificatesApi {

    /**
    * Constructs a new CertificatesApi. 
    * @alias module:api/CertificatesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createCertificate operation.
     * @callback moduleapi/CertificatesApi~createCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Certificate
     * @param {module:model/NginxCertificatesBody} body Certificate Payload
     * @param {module:api/CertificatesApi~createCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createCertificate(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createCertificate");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse201;

      return this.apiClient.callApi(
        '/nginx/certificates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteCertificate operation.
     * @callback moduleapi/CertificatesApi~deleteCertificateCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Certificate
     * @param {Object} certID 
     * @param {module:api/CertificatesApi~deleteCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteCertificate(certID, callback) {
      
      let postBody = null;
      // verify the required parameter 'certID' is set
      if (certID === undefined || certID === null) {
        throw new Error("Missing the required parameter 'certID' when calling deleteCertificate");
      }

      let pathParams = {
        'certID': certID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/nginx/certificates/{certID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the downloadCertificate operation.
     * @callback moduleapi/CertificatesApi~downloadCertificateCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Downloads a Certificate
     * @param {Object} certID 
     * @param {module:api/CertificatesApi~downloadCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    downloadCertificate(certID, callback) {
      
      let postBody = null;
      // verify the required parameter 'certID' is set
      if (certID === undefined || certID === null) {
        throw new Error("Missing the required parameter 'certID' when calling downloadCertificate");
      }

      let pathParams = {
        'certID': certID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/zip'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/nginx/certificates/{certID}/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getCertificate operation.
     * @callback moduleapi/CertificatesApi~getCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Certificate
     * @param {Object} certID 
     * @param {module:api/CertificatesApi~getCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getCertificate(certID, callback) {
      
      let postBody = null;
      // verify the required parameter 'certID' is set
      if (certID === undefined || certID === null) {
        throw new Error("Missing the required parameter 'certID' when calling getCertificate");
      }

      let pathParams = {
        'certID': certID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse201;

      return this.apiClient.callApi(
        '/nginx/certificates/{certID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getCertificates operation.
     * @callback moduleapi/CertificatesApi~getCertificatesCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all certificates
     * @param {Object} opts Optional parameters
     * @param {Object} opts.expand Expansions
     * @param {module:api/CertificatesApi~getCertificatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getCertificates(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/nginx/certificates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the renewCertificate operation.
     * @callback moduleapi/CertificatesApi~renewCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Renews a Certificate
     * @param {Object} certID 
     * @param {module:api/CertificatesApi~renewCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    renewCertificate(certID, callback) {
      
      let postBody = null;
      // verify the required parameter 'certID' is set
      if (certID === undefined || certID === null) {
        throw new Error("Missing the required parameter 'certID' when calling renewCertificate");
      }

      let pathParams = {
        'certID': certID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse201;

      return this.apiClient.callApi(
        '/nginx/certificates/{certID}/renew', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the testHttpReach operation.
     * @callback moduleapi/CertificatesApi~testHttpReachCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Test HTTP Reachability
     * @param {Object} domains Expansions
     * @param {module:api/CertificatesApi~testHttpReachCallback} callback The callback function, accepting three arguments: error, data, response
     */
    testHttpReach(domains, callback) {
      
      let postBody = null;
      // verify the required parameter 'domains' is set
      if (domains === undefined || domains === null) {
        throw new Error("Missing the required parameter 'domains' when calling testHttpReach");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'domains': domains
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/nginx/certificates/test-http', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the uploadCertificate operation.
     * @callback moduleapi/CertificatesApi~uploadCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2004{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uploads a custom Certificate
     * @param {Object} certificate 
     * @param {Object} certificateKey 
     * @param {Object} intermediateCertificate 
     * @param {Object} certID 
     * @param {module:api/CertificatesApi~uploadCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    uploadCertificate(certificate, certificateKey, intermediateCertificate, certID, callback) {
      
      let postBody = null;
      // verify the required parameter 'certificate' is set
      if (certificate === undefined || certificate === null) {
        throw new Error("Missing the required parameter 'certificate' when calling uploadCertificate");
      }
      // verify the required parameter 'certificateKey' is set
      if (certificateKey === undefined || certificateKey === null) {
        throw new Error("Missing the required parameter 'certificateKey' when calling uploadCertificate");
      }
      // verify the required parameter 'intermediateCertificate' is set
      if (intermediateCertificate === undefined || intermediateCertificate === null) {
        throw new Error("Missing the required parameter 'intermediateCertificate' when calling uploadCertificate");
      }
      // verify the required parameter 'certID' is set
      if (certID === undefined || certID === null) {
        throw new Error("Missing the required parameter 'certID' when calling uploadCertificate");
      }

      let pathParams = {
        'certID': certID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'certificate': certificate,'certificate_key': certificateKey,'intermediate_certificate': intermediateCertificate
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2004;

      return this.apiClient.callApi(
        '/nginx/certificates/{certID}/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the validateCertificates operation.
     * @callback moduleapi/CertificatesApi~validateCertificatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validates given Custom Certificates
     * @param {Object} certificate 
     * @param {Object} certificateKey 
     * @param {Object} intermediateCertificate 
     * @param {module:api/CertificatesApi~validateCertificatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    validateCertificates(certificate, certificateKey, intermediateCertificate, callback) {
      
      let postBody = null;
      // verify the required parameter 'certificate' is set
      if (certificate === undefined || certificate === null) {
        throw new Error("Missing the required parameter 'certificate' when calling validateCertificates");
      }
      // verify the required parameter 'certificateKey' is set
      if (certificateKey === undefined || certificateKey === null) {
        throw new Error("Missing the required parameter 'certificateKey' when calling validateCertificates");
      }
      // verify the required parameter 'intermediateCertificate' is set
      if (intermediateCertificate === undefined || intermediateCertificate === null) {
        throw new Error("Missing the required parameter 'intermediateCertificate' when calling validateCertificates");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'certificate': certificate,'certificate_key': certificateKey,'intermediate_certificate': intermediateCertificate
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/nginx/certificates/validate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}