/*
 * Nginx Proxy Manager API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.12.3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.67
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import InlineResponse2011 from '../model/InlineResponse2011';
import InlineResponse400 from '../model/InlineResponse400';
import NginxProxyhostsBody from '../model/NginxProxyhostsBody';
import ProxyhostsHostIDBody from '../model/ProxyhostsHostIDBody';

/**
* ProxyHosts service.
* @module api/ProxyHostsApi
* @version 2.12.3
*/
export default class ProxyHostsApi {

    /**
    * Constructs a new ProxyHostsApi. 
    * @alias module:api/ProxyHostsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createProxyHost operation.
     * @callback moduleapi/ProxyHostsApi~createProxyHostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2011{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Proxy Host
     * @param {module:model/NginxProxyhostsBody} body Proxy Host Payload
     * @param {module:api/ProxyHostsApi~createProxyHostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createProxyHost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createProxyHost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2011;

      return this.apiClient.callApi(
        '/nginx/proxy-hosts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteProxyHost operation.
     * @callback moduleapi/ProxyHostsApi~deleteProxyHostCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Proxy Host
     * @param {Object} hostID 
     * @param {module:api/ProxyHostsApi~deleteProxyHostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteProxyHost(hostID, callback) {
      
      let postBody = null;
      // verify the required parameter 'hostID' is set
      if (hostID === undefined || hostID === null) {
        throw new Error("Missing the required parameter 'hostID' when calling deleteProxyHost");
      }

      let pathParams = {
        'hostID': hostID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/nginx/proxy-hosts/{hostID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the disableProxyHost operation.
     * @callback moduleapi/ProxyHostsApi~disableProxyHostCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable a Proxy Host
     * @param {Object} hostID 
     * @param {module:api/ProxyHostsApi~disableProxyHostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    disableProxyHost(hostID, callback) {
      
      let postBody = null;
      // verify the required parameter 'hostID' is set
      if (hostID === undefined || hostID === null) {
        throw new Error("Missing the required parameter 'hostID' when calling disableProxyHost");
      }

      let pathParams = {
        'hostID': hostID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/nginx/proxy-hosts/{hostID}/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the enableProxyHost operation.
     * @callback moduleapi/ProxyHostsApi~enableProxyHostCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable a Proxy Host
     * @param {Object} hostID 
     * @param {module:api/ProxyHostsApi~enableProxyHostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    enableProxyHost(hostID, callback) {
      
      let postBody = null;
      // verify the required parameter 'hostID' is set
      if (hostID === undefined || hostID === null) {
        throw new Error("Missing the required parameter 'hostID' when calling enableProxyHost");
      }

      let pathParams = {
        'hostID': hostID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/nginx/proxy-hosts/{hostID}/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getProxyHost operation.
     * @callback moduleapi/ProxyHostsApi~getProxyHostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2011{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Proxy Host
     * @param {Object} hostID 
     * @param {module:api/ProxyHostsApi~getProxyHostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getProxyHost(hostID, callback) {
      
      let postBody = null;
      // verify the required parameter 'hostID' is set
      if (hostID === undefined || hostID === null) {
        throw new Error("Missing the required parameter 'hostID' when calling getProxyHost");
      }

      let pathParams = {
        'hostID': hostID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2011;

      return this.apiClient.callApi(
        '/nginx/proxy-hosts/{hostID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getProxyHosts operation.
     * @callback moduleapi/ProxyHostsApi~getProxyHostsCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all proxy hosts
     * @param {Object} opts Optional parameters
     * @param {Object} opts.expand Expansions
     * @param {module:api/ProxyHostsApi~getProxyHostsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getProxyHosts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/nginx/proxy-hosts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateProxyHost operation.
     * @callback moduleapi/ProxyHostsApi~updateProxyHostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2011{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Proxy Host
     * @param {module:model/ProxyhostsHostIDBody} body Proxy Host Payload
     * @param {Object} hostID 
     * @param {module:api/ProxyHostsApi~updateProxyHostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateProxyHost(body, hostID, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateProxyHost");
      }
      // verify the required parameter 'hostID' is set
      if (hostID === undefined || hostID === null) {
        throw new Error("Missing the required parameter 'hostID' when calling updateProxyHost");
      }

      let pathParams = {
        'hostID': hostID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2011;

      return this.apiClient.callApi(
        '/nginx/proxy-hosts/{hostID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}