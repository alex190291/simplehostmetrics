/*
 * Nginx Proxy Manager API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.12.3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.67
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import DeadhostsHostIDBody from '../model/DeadhostsHostIDBody';
import InlineResponse2013 from '../model/InlineResponse2013';
import InlineResponse400 from '../model/InlineResponse400';
import NginxDeadhostsBody from '../model/NginxDeadhostsBody';

/**
* Class404Hosts service.
* @module api/Class404HostsApi
* @version 2.12.3
*/
export default class Class404HostsApi {

    /**
    * Constructs a new Class404HostsApi. 
    * @alias module:api/Class404HostsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the create404Host operation.
     * @callback moduleapi/Class404HostsApi~create404HostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2013{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a 404 Host
     * @param {module:model/NginxDeadhostsBody} body 404 Host Payload
     * @param {module:api/Class404HostsApi~create404HostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    create404Host(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling create404Host");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2013;

      return this.apiClient.callApi(
        '/nginx/dead-hosts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteDeadHost operation.
     * @callback moduleapi/Class404HostsApi~deleteDeadHostCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a 404 Host
     * @param {Object} hostID 
     * @param {module:api/Class404HostsApi~deleteDeadHostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteDeadHost(hostID, callback) {
      
      let postBody = null;
      // verify the required parameter 'hostID' is set
      if (hostID === undefined || hostID === null) {
        throw new Error("Missing the required parameter 'hostID' when calling deleteDeadHost");
      }

      let pathParams = {
        'hostID': hostID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/nginx/dead-hosts/{hostID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the disableDeadHost operation.
     * @callback moduleapi/Class404HostsApi~disableDeadHostCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable a 404 Host
     * @param {Object} hostID 
     * @param {module:api/Class404HostsApi~disableDeadHostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    disableDeadHost(hostID, callback) {
      
      let postBody = null;
      // verify the required parameter 'hostID' is set
      if (hostID === undefined || hostID === null) {
        throw new Error("Missing the required parameter 'hostID' when calling disableDeadHost");
      }

      let pathParams = {
        'hostID': hostID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/nginx/dead-hosts/{hostID}/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the enableDeadHost operation.
     * @callback moduleapi/Class404HostsApi~enableDeadHostCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable a 404 Host
     * @param {Object} hostID 
     * @param {module:api/Class404HostsApi~enableDeadHostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    enableDeadHost(hostID, callback) {
      
      let postBody = null;
      // verify the required parameter 'hostID' is set
      if (hostID === undefined || hostID === null) {
        throw new Error("Missing the required parameter 'hostID' when calling enableDeadHost");
      }

      let pathParams = {
        'hostID': hostID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/nginx/dead-hosts/{hostID}/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getDeadHost operation.
     * @callback moduleapi/Class404HostsApi~getDeadHostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2013{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a 404 Host
     * @param {Object} hostID 
     * @param {module:api/Class404HostsApi~getDeadHostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getDeadHost(hostID, callback) {
      
      let postBody = null;
      // verify the required parameter 'hostID' is set
      if (hostID === undefined || hostID === null) {
        throw new Error("Missing the required parameter 'hostID' when calling getDeadHost");
      }

      let pathParams = {
        'hostID': hostID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2013;

      return this.apiClient.callApi(
        '/nginx/dead-hosts/{hostID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getDeadHosts operation.
     * @callback moduleapi/Class404HostsApi~getDeadHostsCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all 404 hosts
     * @param {Object} opts Optional parameters
     * @param {Object} opts.expand Expansions
     * @param {module:api/Class404HostsApi~getDeadHostsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getDeadHosts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/nginx/dead-hosts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateDeadHost operation.
     * @callback moduleapi/Class404HostsApi~updateDeadHostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2013{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a 404 Host
     * @param {module:model/DeadhostsHostIDBody} body 404 Host Payload
     * @param {Object} hostID 
     * @param {module:api/Class404HostsApi~updateDeadHostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateDeadHost(body, hostID, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateDeadHost");
      }
      // verify the required parameter 'hostID' is set
      if (hostID === undefined || hostID === null) {
        throw new Error("Missing the required parameter 'hostID' when calling updateDeadHost");
      }

      let pathParams = {
        'hostID': hostID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2013;

      return this.apiClient.callApi(
        '/nginx/dead-hosts/{hostID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}