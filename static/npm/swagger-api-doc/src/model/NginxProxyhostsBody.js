/*
 * Nginx Proxy Manager API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.12.3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.67
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from '../ApiClient';

/**
 * The NginxProxyhostsBody model module.
 * @module model/NginxProxyhostsBody
 * @version 2.12.3
 */
export default class NginxProxyhostsBody {
  /**
   * Constructs a new <code>NginxProxyhostsBody</code>.
   * @alias module:model/NginxProxyhostsBody
   * @class
   * @param domainNames {Object} Domain Names separated by a comma
   * @param forwardScheme {Object} 
   * @param forwardHost {Object} 
   * @param forwardPort {Object} 
   */
  constructor(domainNames, forwardScheme, forwardHost, forwardPort) {
    this.domainNames = domainNames;
    this.forwardScheme = forwardScheme;
    this.forwardHost = forwardHost;
    this.forwardPort = forwardPort;
  }

  /**
   * Constructs a <code>NginxProxyhostsBody</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/NginxProxyhostsBody} obj Optional instance to populate.
   * @return {module:model/NginxProxyhostsBody} The populated <code>NginxProxyhostsBody</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new NginxProxyhostsBody();
      if (data.hasOwnProperty('domain_names'))
        obj.domainNames = ApiClient.convertToType(data['domain_names'], Object);
      if (data.hasOwnProperty('forward_scheme'))
        obj.forwardScheme = ApiClient.convertToType(data['forward_scheme'], Object);
      if (data.hasOwnProperty('forward_host'))
        obj.forwardHost = ApiClient.convertToType(data['forward_host'], Object);
      if (data.hasOwnProperty('forward_port'))
        obj.forwardPort = ApiClient.convertToType(data['forward_port'], Object);
      if (data.hasOwnProperty('certificate_id'))
        obj.certificateId = ApiClient.convertToType(data['certificate_id'], Object);
      if (data.hasOwnProperty('ssl_forced'))
        obj.sslForced = ApiClient.convertToType(data['ssl_forced'], Object);
      if (data.hasOwnProperty('hsts_enabled'))
        obj.hstsEnabled = ApiClient.convertToType(data['hsts_enabled'], Object);
      if (data.hasOwnProperty('hsts_subdomains'))
        obj.hstsSubdomains = ApiClient.convertToType(data['hsts_subdomains'], Object);
      if (data.hasOwnProperty('http2_support'))
        obj.http2Support = ApiClient.convertToType(data['http2_support'], Object);
      if (data.hasOwnProperty('block_exploits'))
        obj.blockExploits = ApiClient.convertToType(data['block_exploits'], Object);
      if (data.hasOwnProperty('caching_enabled'))
        obj.cachingEnabled = ApiClient.convertToType(data['caching_enabled'], Object);
      if (data.hasOwnProperty('allow_websocket_upgrade'))
        obj.allowWebsocketUpgrade = ApiClient.convertToType(data['allow_websocket_upgrade'], Object);
      if (data.hasOwnProperty('access_list_id'))
        obj.accessListId = ApiClient.convertToType(data['access_list_id'], Object);
      if (data.hasOwnProperty('advanced_config'))
        obj.advancedConfig = ApiClient.convertToType(data['advanced_config'], Object);
      if (data.hasOwnProperty('enabled'))
        obj.enabled = ApiClient.convertToType(data['enabled'], Object);
      if (data.hasOwnProperty('meta'))
        obj.meta = ApiClient.convertToType(data['meta'], Object);
      if (data.hasOwnProperty('locations'))
        obj.locations = ApiClient.convertToType(data['locations'], Object);
    }
    return obj;
  }
}

/**
 * Domain Names separated by a comma
 * @member {Object} domainNames
 */
NginxProxyhostsBody.prototype.domainNames = undefined;

/**
 * @member {Object} forwardScheme
 */
NginxProxyhostsBody.prototype.forwardScheme = undefined;

/**
 * @member {Object} forwardHost
 */
NginxProxyhostsBody.prototype.forwardHost = undefined;

/**
 * @member {Object} forwardPort
 */
NginxProxyhostsBody.prototype.forwardPort = undefined;

/**
 * Certificate ID
 * @member {Object} certificateId
 */
NginxProxyhostsBody.prototype.certificateId = undefined;

/**
 * Is SSL Forced
 * @member {Object} sslForced
 */
NginxProxyhostsBody.prototype.sslForced = undefined;

/**
 * Is HSTS Enabled
 * @member {Object} hstsEnabled
 */
NginxProxyhostsBody.prototype.hstsEnabled = undefined;

/**
 * Is HSTS applicable to all subdomains
 * @member {Object} hstsSubdomains
 */
NginxProxyhostsBody.prototype.hstsSubdomains = undefined;

/**
 * HTTP2 Protocol Support
 * @member {Object} http2Support
 */
NginxProxyhostsBody.prototype.http2Support = undefined;

/**
 * Should we block common exploits
 * @member {Object} blockExploits
 */
NginxProxyhostsBody.prototype.blockExploits = undefined;

/**
 * Should we cache assets
 * @member {Object} cachingEnabled
 */
NginxProxyhostsBody.prototype.cachingEnabled = undefined;

/**
 * Allow Websocket Upgrade for all paths
 * @member {Object} allowWebsocketUpgrade
 */
NginxProxyhostsBody.prototype.allowWebsocketUpgrade = undefined;

/**
 * Access List ID
 * @member {Object} accessListId
 */
NginxProxyhostsBody.prototype.accessListId = undefined;

/**
 * @member {Object} advancedConfig
 */
NginxProxyhostsBody.prototype.advancedConfig = undefined;

/**
 * Is Enabled
 * @member {Object} enabled
 */
NginxProxyhostsBody.prototype.enabled = undefined;

/**
 * @member {Object} meta
 */
NginxProxyhostsBody.prototype.meta = undefined;

/**
 * @member {Object} locations
 */
NginxProxyhostsBody.prototype.locations = undefined;

