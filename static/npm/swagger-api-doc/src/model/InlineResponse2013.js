/*
 * Nginx Proxy Manager API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.12.3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.67
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from '../ApiClient';

/**
 * The InlineResponse2013 model module.
 * @module model/InlineResponse2013
 * @version 2.12.3
 */
export default class InlineResponse2013 {
  /**
   * Constructs a new <code>InlineResponse2013</code>.
   * 404 Host object
   * @alias module:model/InlineResponse2013
   * @class
   * @param id {Object} Unique identifier
   * @param createdOn {Object} Date and time of creation
   * @param modifiedOn {Object} Date and time of last update
   * @param ownerUserId {Object} User ID
   * @param domainNames {Object} Domain Names separated by a comma
   * @param certificateId {Object} Certificate ID
   * @param sslForced {Object} Is SSL Forced
   * @param hstsEnabled {Object} Is HSTS Enabled
   * @param hstsSubdomains {Object} Is HSTS applicable to all subdomains
   * @param http2Support {Object} HTTP2 Protocol Support
   * @param advancedConfig {Object} 
   * @param enabled {Object} Is Enabled
   * @param meta {Object} 
   */
  constructor(id, createdOn, modifiedOn, ownerUserId, domainNames, certificateId, sslForced, hstsEnabled, hstsSubdomains, http2Support, advancedConfig, enabled, meta) {
    this.id = id;
    this.createdOn = createdOn;
    this.modifiedOn = modifiedOn;
    this.ownerUserId = ownerUserId;
    this.domainNames = domainNames;
    this.certificateId = certificateId;
    this.sslForced = sslForced;
    this.hstsEnabled = hstsEnabled;
    this.hstsSubdomains = hstsSubdomains;
    this.http2Support = http2Support;
    this.advancedConfig = advancedConfig;
    this.enabled = enabled;
    this.meta = meta;
  }

  /**
   * Constructs a <code>InlineResponse2013</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/InlineResponse2013} obj Optional instance to populate.
   * @return {module:model/InlineResponse2013} The populated <code>InlineResponse2013</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new InlineResponse2013();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], Object);
      if (data.hasOwnProperty('created_on'))
        obj.createdOn = ApiClient.convertToType(data['created_on'], Object);
      if (data.hasOwnProperty('modified_on'))
        obj.modifiedOn = ApiClient.convertToType(data['modified_on'], Object);
      if (data.hasOwnProperty('owner_user_id'))
        obj.ownerUserId = ApiClient.convertToType(data['owner_user_id'], Object);
      if (data.hasOwnProperty('domain_names'))
        obj.domainNames = ApiClient.convertToType(data['domain_names'], Object);
      if (data.hasOwnProperty('certificate_id'))
        obj.certificateId = ApiClient.convertToType(data['certificate_id'], Object);
      if (data.hasOwnProperty('ssl_forced'))
        obj.sslForced = ApiClient.convertToType(data['ssl_forced'], Object);
      if (data.hasOwnProperty('hsts_enabled'))
        obj.hstsEnabled = ApiClient.convertToType(data['hsts_enabled'], Object);
      if (data.hasOwnProperty('hsts_subdomains'))
        obj.hstsSubdomains = ApiClient.convertToType(data['hsts_subdomains'], Object);
      if (data.hasOwnProperty('http2_support'))
        obj.http2Support = ApiClient.convertToType(data['http2_support'], Object);
      if (data.hasOwnProperty('advanced_config'))
        obj.advancedConfig = ApiClient.convertToType(data['advanced_config'], Object);
      if (data.hasOwnProperty('enabled'))
        obj.enabled = ApiClient.convertToType(data['enabled'], Object);
      if (data.hasOwnProperty('meta'))
        obj.meta = ApiClient.convertToType(data['meta'], Object);
    }
    return obj;
  }
}

/**
 * Unique identifier
 * @member {Object} id
 */
InlineResponse2013.prototype.id = undefined;

/**
 * Date and time of creation
 * @member {Object} createdOn
 */
InlineResponse2013.prototype.createdOn = undefined;

/**
 * Date and time of last update
 * @member {Object} modifiedOn
 */
InlineResponse2013.prototype.modifiedOn = undefined;

/**
 * User ID
 * @member {Object} ownerUserId
 */
InlineResponse2013.prototype.ownerUserId = undefined;

/**
 * Domain Names separated by a comma
 * @member {Object} domainNames
 */
InlineResponse2013.prototype.domainNames = undefined;

/**
 * Certificate ID
 * @member {Object} certificateId
 */
InlineResponse2013.prototype.certificateId = undefined;

/**
 * Is SSL Forced
 * @member {Object} sslForced
 */
InlineResponse2013.prototype.sslForced = undefined;

/**
 * Is HSTS Enabled
 * @member {Object} hstsEnabled
 */
InlineResponse2013.prototype.hstsEnabled = undefined;

/**
 * Is HSTS applicable to all subdomains
 * @member {Object} hstsSubdomains
 */
InlineResponse2013.prototype.hstsSubdomains = undefined;

/**
 * HTTP2 Protocol Support
 * @member {Object} http2Support
 */
InlineResponse2013.prototype.http2Support = undefined;

/**
 * @member {Object} advancedConfig
 */
InlineResponse2013.prototype.advancedConfig = undefined;

/**
 * Is Enabled
 * @member {Object} enabled
 */
InlineResponse2013.prototype.enabled = undefined;

/**
 * @member {Object} meta
 */
InlineResponse2013.prototype.meta = undefined;

