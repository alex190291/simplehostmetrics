/*
 * Nginx Proxy Manager API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.12.3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.67
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from '../ApiClient';

/**
 * The NginxcertificatesMeta model module.
 * @module model/NginxcertificatesMeta
 * @version 2.12.3
 */
export default class NginxcertificatesMeta {
  /**
   * Constructs a new <code>NginxcertificatesMeta</code>.
   * @alias module:model/NginxcertificatesMeta
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>NginxcertificatesMeta</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/NginxcertificatesMeta} obj Optional instance to populate.
   * @return {module:model/NginxcertificatesMeta} The populated <code>NginxcertificatesMeta</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new NginxcertificatesMeta();
      if (data.hasOwnProperty('certificate'))
        obj.certificate = ApiClient.convertToType(data['certificate'], Object);
      if (data.hasOwnProperty('certificate_key'))
        obj.certificateKey = ApiClient.convertToType(data['certificate_key'], Object);
      if (data.hasOwnProperty('dns_challenge'))
        obj.dnsChallenge = ApiClient.convertToType(data['dns_challenge'], Object);
      if (data.hasOwnProperty('dns_provider'))
        obj.dnsProvider = ApiClient.convertToType(data['dns_provider'], Object);
      if (data.hasOwnProperty('dns_provider_credentials'))
        obj.dnsProviderCredentials = ApiClient.convertToType(data['dns_provider_credentials'], Object);
      if (data.hasOwnProperty('letsencrypt_agree'))
        obj.letsencryptAgree = ApiClient.convertToType(data['letsencrypt_agree'], Object);
      if (data.hasOwnProperty('letsencrypt_certificate'))
        obj.letsencryptCertificate = ApiClient.convertToType(data['letsencrypt_certificate'], Object);
      if (data.hasOwnProperty('letsencrypt_email'))
        obj.letsencryptEmail = ApiClient.convertToType(data['letsencrypt_email'], Object);
      if (data.hasOwnProperty('propagation_seconds'))
        obj.propagationSeconds = ApiClient.convertToType(data['propagation_seconds'], Object);
    }
    return obj;
  }
}

/**
 * @member {Object} certificate
 */
NginxcertificatesMeta.prototype.certificate = undefined;

/**
 * @member {Object} certificateKey
 */
NginxcertificatesMeta.prototype.certificateKey = undefined;

/**
 * @member {Object} dnsChallenge
 */
NginxcertificatesMeta.prototype.dnsChallenge = undefined;

/**
 * @member {Object} dnsProvider
 */
NginxcertificatesMeta.prototype.dnsProvider = undefined;

/**
 * @member {Object} dnsProviderCredentials
 */
NginxcertificatesMeta.prototype.dnsProviderCredentials = undefined;

/**
 * @member {Object} letsencryptAgree
 */
NginxcertificatesMeta.prototype.letsencryptAgree = undefined;

/**
 * @member {Object} letsencryptCertificate
 */
NginxcertificatesMeta.prototype.letsencryptCertificate = undefined;

/**
 * @member {Object} letsencryptEmail
 */
NginxcertificatesMeta.prototype.letsencryptEmail = undefined;

/**
 * @member {Object} propagationSeconds
 */
NginxcertificatesMeta.prototype.propagationSeconds = undefined;

