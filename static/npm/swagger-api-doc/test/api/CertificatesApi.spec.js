/*
 * Nginx Proxy Manager API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.12.3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.67
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NginxProxyManagerApi);
  }
}(this, function(expect, NginxProxyManagerApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NginxProxyManagerApi.CertificatesApi();
  });

  describe('(package)', function() {
    describe('CertificatesApi', function() {
      describe('createCertificate', function() {
        it('should call createCertificate successfully', function(done) {
          // TODO: uncomment, update parameter values for createCertificate call and complete the assertions
          /*

          instance.createCertificate(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(NginxProxyManagerApi.InlineResponse201);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteCertificate', function() {
        it('should call deleteCertificate successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteCertificate call and complete the assertions
          /*

          instance.deleteCertificate(certID, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('downloadCertificate', function() {
        it('should call downloadCertificate successfully', function(done) {
          // TODO: uncomment, update parameter values for downloadCertificate call and complete the assertions
          /*

          instance.downloadCertificate(certID, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCertificate', function() {
        it('should call getCertificate successfully', function(done) {
          // TODO: uncomment, update parameter values for getCertificate call and complete the assertions
          /*

          instance.getCertificate(certID, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(NginxProxyManagerApi.InlineResponse201);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCertificates', function() {
        it('should call getCertificates successfully', function(done) {
          // TODO: uncomment, update parameter values for getCertificates call and complete the assertions
          /*
          var opts = {};

          instance.getCertificates(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('renewCertificate', function() {
        it('should call renewCertificate successfully', function(done) {
          // TODO: uncomment, update parameter values for renewCertificate call and complete the assertions
          /*

          instance.renewCertificate(certID, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(NginxProxyManagerApi.InlineResponse201);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('testHttpReach', function() {
        it('should call testHttpReach successfully', function(done) {
          // TODO: uncomment, update parameter values for testHttpReach call
          /*

          instance.testHttpReach(domains, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('uploadCertificate', function() {
        it('should call uploadCertificate successfully', function(done) {
          // TODO: uncomment, update parameter values for uploadCertificate call and complete the assertions
          /*

          instance.uploadCertificate(certificate, certificateKey, intermediateCertificate, certID, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(NginxProxyManagerApi.InlineResponse2004);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('validateCertificates', function() {
        it('should call validateCertificates successfully', function(done) {
          // TODO: uncomment, update parameter values for validateCertificates call and complete the assertions
          /*

          instance.validateCertificates(certificate, certificateKey, intermediateCertificate, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(NginxProxyManagerApi.InlineResponse2003);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
