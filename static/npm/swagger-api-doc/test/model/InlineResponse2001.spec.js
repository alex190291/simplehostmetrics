/*
 * Nginx Proxy Manager API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.12.3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.67
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NginxProxyManagerApi);
  }
}(this, function(expect, NginxProxyManagerApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('InlineResponse2001', function() {
      beforeEach(function() {
        instance = new NginxProxyManagerApi.InlineResponse2001();
      });

      it('should create an instance of InlineResponse2001', function() {
        // TODO: update the code to test InlineResponse2001
        expect(instance).to.be.a(NginxProxyManagerApi.InlineResponse2001);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property createdOn (base name: "created_on")', function() {
        // TODO: update the code to test the property createdOn
        expect(instance).to.have.property('createdOn');
        // expect(instance.createdOn).to.be(expectedValueLiteral);
      });

      it('should have the property modifiedOn (base name: "modified_on")', function() {
        // TODO: update the code to test the property modifiedOn
        expect(instance).to.have.property('modifiedOn');
        // expect(instance.modifiedOn).to.be(expectedValueLiteral);
      });

      it('should have the property userId (base name: "user_id")', function() {
        // TODO: update the code to test the property userId
        expect(instance).to.have.property('userId');
        // expect(instance.userId).to.be(expectedValueLiteral);
      });

      it('should have the property objectType (base name: "object_type")', function() {
        // TODO: update the code to test the property objectType
        expect(instance).to.have.property('objectType');
        // expect(instance.objectType).to.be(expectedValueLiteral);
      });

      it('should have the property objectId (base name: "object_id")', function() {
        // TODO: update the code to test the property objectId
        expect(instance).to.have.property('objectId');
        // expect(instance.objectId).to.be(expectedValueLiteral);
      });

      it('should have the property action (base name: "action")', function() {
        // TODO: update the code to test the property action
        expect(instance).to.have.property('action');
        // expect(instance.action).to.be(expectedValueLiteral);
      });

      it('should have the property meta (base name: "meta")', function() {
        // TODO: update the code to test the property meta
        expect(instance).to.have.property('meta');
        // expect(instance.meta).to.be(expectedValueLiteral);
      });

    });
  });

}));
