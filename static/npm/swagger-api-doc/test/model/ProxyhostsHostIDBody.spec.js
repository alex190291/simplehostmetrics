/*
 * Nginx Proxy Manager API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.12.3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.67
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NginxProxyManagerApi);
  }
}(this, function(expect, NginxProxyManagerApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ProxyhostsHostIDBody', function() {
      beforeEach(function() {
        instance = new NginxProxyManagerApi.ProxyhostsHostIDBody();
      });

      it('should create an instance of ProxyhostsHostIDBody', function() {
        // TODO: update the code to test ProxyhostsHostIDBody
        expect(instance).to.be.a(NginxProxyManagerApi.ProxyhostsHostIDBody);
      });

      it('should have the property domainNames (base name: "domain_names")', function() {
        // TODO: update the code to test the property domainNames
        expect(instance).to.have.property('domainNames');
        // expect(instance.domainNames).to.be(expectedValueLiteral);
      });

      it('should have the property forwardScheme (base name: "forward_scheme")', function() {
        // TODO: update the code to test the property forwardScheme
        expect(instance).to.have.property('forwardScheme');
        // expect(instance.forwardScheme).to.be(expectedValueLiteral);
      });

      it('should have the property forwardHost (base name: "forward_host")', function() {
        // TODO: update the code to test the property forwardHost
        expect(instance).to.have.property('forwardHost');
        // expect(instance.forwardHost).to.be(expectedValueLiteral);
      });

      it('should have the property forwardPort (base name: "forward_port")', function() {
        // TODO: update the code to test the property forwardPort
        expect(instance).to.have.property('forwardPort');
        // expect(instance.forwardPort).to.be(expectedValueLiteral);
      });

      it('should have the property certificateId (base name: "certificate_id")', function() {
        // TODO: update the code to test the property certificateId
        expect(instance).to.have.property('certificateId');
        // expect(instance.certificateId).to.be(expectedValueLiteral);
      });

      it('should have the property sslForced (base name: "ssl_forced")', function() {
        // TODO: update the code to test the property sslForced
        expect(instance).to.have.property('sslForced');
        // expect(instance.sslForced).to.be(expectedValueLiteral);
      });

      it('should have the property hstsEnabled (base name: "hsts_enabled")', function() {
        // TODO: update the code to test the property hstsEnabled
        expect(instance).to.have.property('hstsEnabled');
        // expect(instance.hstsEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property hstsSubdomains (base name: "hsts_subdomains")', function() {
        // TODO: update the code to test the property hstsSubdomains
        expect(instance).to.have.property('hstsSubdomains');
        // expect(instance.hstsSubdomains).to.be(expectedValueLiteral);
      });

      it('should have the property http2Support (base name: "http2_support")', function() {
        // TODO: update the code to test the property http2Support
        expect(instance).to.have.property('http2Support');
        // expect(instance.http2Support).to.be(expectedValueLiteral);
      });

      it('should have the property blockExploits (base name: "block_exploits")', function() {
        // TODO: update the code to test the property blockExploits
        expect(instance).to.have.property('blockExploits');
        // expect(instance.blockExploits).to.be(expectedValueLiteral);
      });

      it('should have the property cachingEnabled (base name: "caching_enabled")', function() {
        // TODO: update the code to test the property cachingEnabled
        expect(instance).to.have.property('cachingEnabled');
        // expect(instance.cachingEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property allowWebsocketUpgrade (base name: "allow_websocket_upgrade")', function() {
        // TODO: update the code to test the property allowWebsocketUpgrade
        expect(instance).to.have.property('allowWebsocketUpgrade');
        // expect(instance.allowWebsocketUpgrade).to.be(expectedValueLiteral);
      });

      it('should have the property accessListId (base name: "access_list_id")', function() {
        // TODO: update the code to test the property accessListId
        expect(instance).to.have.property('accessListId');
        // expect(instance.accessListId).to.be(expectedValueLiteral);
      });

      it('should have the property advancedConfig (base name: "advanced_config")', function() {
        // TODO: update the code to test the property advancedConfig
        expect(instance).to.have.property('advancedConfig');
        // expect(instance.advancedConfig).to.be(expectedValueLiteral);
      });

      it('should have the property enabled (base name: "enabled")', function() {
        // TODO: update the code to test the property enabled
        expect(instance).to.have.property('enabled');
        // expect(instance.enabled).to.be(expectedValueLiteral);
      });

      it('should have the property meta (base name: "meta")', function() {
        // TODO: update the code to test the property meta
        expect(instance).to.have.property('meta');
        // expect(instance.meta).to.be(expectedValueLiteral);
      });

      it('should have the property locations (base name: "locations")', function() {
        // TODO: update the code to test the property locations
        expect(instance).to.have.property('locations');
        // expect(instance.locations).to.be(expectedValueLiteral);
      });

    });
  });

}));
