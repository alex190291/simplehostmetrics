/*
 * Nginx Proxy Manager API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.12.3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.67
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NginxProxyManagerApi);
  }
}(this, function(expect, NginxProxyManagerApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('NginxStreamsBody', function() {
      beforeEach(function() {
        instance = new NginxProxyManagerApi.NginxStreamsBody();
      });

      it('should create an instance of NginxStreamsBody', function() {
        // TODO: update the code to test NginxStreamsBody
        expect(instance).to.be.a(NginxProxyManagerApi.NginxStreamsBody);
      });

      it('should have the property incomingPort (base name: "incoming_port")', function() {
        // TODO: update the code to test the property incomingPort
        expect(instance).to.have.property('incomingPort');
        // expect(instance.incomingPort).to.be(expectedValueLiteral);
      });

      it('should have the property forwardingHost (base name: "forwarding_host")', function() {
        // TODO: update the code to test the property forwardingHost
        expect(instance).to.have.property('forwardingHost');
        // expect(instance.forwardingHost).to.be(expectedValueLiteral);
      });

      it('should have the property forwardingPort (base name: "forwarding_port")', function() {
        // TODO: update the code to test the property forwardingPort
        expect(instance).to.have.property('forwardingPort');
        // expect(instance.forwardingPort).to.be(expectedValueLiteral);
      });

      it('should have the property tcpForwarding (base name: "tcp_forwarding")', function() {
        // TODO: update the code to test the property tcpForwarding
        expect(instance).to.have.property('tcpForwarding');
        // expect(instance.tcpForwarding).to.be(expectedValueLiteral);
      });

      it('should have the property udpForwarding (base name: "udp_forwarding")', function() {
        // TODO: update the code to test the property udpForwarding
        expect(instance).to.have.property('udpForwarding');
        // expect(instance.udpForwarding).to.be(expectedValueLiteral);
      });

      it('should have the property certificateId (base name: "certificate_id")', function() {
        // TODO: update the code to test the property certificateId
        expect(instance).to.have.property('certificateId');
        // expect(instance.certificateId).to.be(expectedValueLiteral);
      });

      it('should have the property meta (base name: "meta")', function() {
        // TODO: update the code to test the property meta
        expect(instance).to.have.property('meta');
        // expect(instance.meta).to.be(expectedValueLiteral);
      });

    });
  });

}));
