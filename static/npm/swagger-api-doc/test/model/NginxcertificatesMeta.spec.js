/*
 * Nginx Proxy Manager API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.12.3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.67
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NginxProxyManagerApi);
  }
}(this, function(expect, NginxProxyManagerApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('NginxcertificatesMeta', function() {
      beforeEach(function() {
        instance = new NginxProxyManagerApi.NginxcertificatesMeta();
      });

      it('should create an instance of NginxcertificatesMeta', function() {
        // TODO: update the code to test NginxcertificatesMeta
        expect(instance).to.be.a(NginxProxyManagerApi.NginxcertificatesMeta);
      });

      it('should have the property certificate (base name: "certificate")', function() {
        // TODO: update the code to test the property certificate
        expect(instance).to.have.property('certificate');
        // expect(instance.certificate).to.be(expectedValueLiteral);
      });

      it('should have the property certificateKey (base name: "certificate_key")', function() {
        // TODO: update the code to test the property certificateKey
        expect(instance).to.have.property('certificateKey');
        // expect(instance.certificateKey).to.be(expectedValueLiteral);
      });

      it('should have the property dnsChallenge (base name: "dns_challenge")', function() {
        // TODO: update the code to test the property dnsChallenge
        expect(instance).to.have.property('dnsChallenge');
        // expect(instance.dnsChallenge).to.be(expectedValueLiteral);
      });

      it('should have the property dnsProvider (base name: "dns_provider")', function() {
        // TODO: update the code to test the property dnsProvider
        expect(instance).to.have.property('dnsProvider');
        // expect(instance.dnsProvider).to.be(expectedValueLiteral);
      });

      it('should have the property dnsProviderCredentials (base name: "dns_provider_credentials")', function() {
        // TODO: update the code to test the property dnsProviderCredentials
        expect(instance).to.have.property('dnsProviderCredentials');
        // expect(instance.dnsProviderCredentials).to.be(expectedValueLiteral);
      });

      it('should have the property letsencryptAgree (base name: "letsencrypt_agree")', function() {
        // TODO: update the code to test the property letsencryptAgree
        expect(instance).to.have.property('letsencryptAgree');
        // expect(instance.letsencryptAgree).to.be(expectedValueLiteral);
      });

      it('should have the property letsencryptCertificate (base name: "letsencrypt_certificate")', function() {
        // TODO: update the code to test the property letsencryptCertificate
        expect(instance).to.have.property('letsencryptCertificate');
        // expect(instance.letsencryptCertificate).to.be(expectedValueLiteral);
      });

      it('should have the property letsencryptEmail (base name: "letsencrypt_email")', function() {
        // TODO: update the code to test the property letsencryptEmail
        expect(instance).to.have.property('letsencryptEmail');
        // expect(instance.letsencryptEmail).to.be(expectedValueLiteral);
      });

      it('should have the property propagationSeconds (base name: "propagation_seconds")', function() {
        // TODO: update the code to test the property propagationSeconds
        expect(instance).to.have.property('propagationSeconds');
        // expect(instance.propagationSeconds).to.be(expectedValueLiteral);
      });

    });
  });

}));
