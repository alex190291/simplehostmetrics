GET / → health: Returns API health status – (Response: {status: "OK", version: {major, minor, revision}}; no extra parameters).
GET /audit-log → getAuditLog: Get Audit Log – (Security: BearerAuth with scope "audit‑log"; no additional parameters).
GET /nginx/access-lists → getAccessLists: Get all access lists – (Security: BearerAuth "access_lists"; Query parameter: expand (enum: [owner, items, clients, proxy_hosts])).
POST /nginx/access-lists → createAccessList: Create an Access List – (Security: BearerAuth "access_lists"; Request Body required property: name; optional: satisfy_any, pass_auth, items (array of {username, password}), clients (array of {address, directive}), meta).
GET /nginx/access-lists/{listID} → getAccessList: Get an access list – (Security: BearerAuth "access_lists"; Path parameter: listID [integer ≥ 1]).
PUT /nginx/access-lists/{listID} → updateAccessList: Update an access list – (Security: BearerAuth "access_lists"; Path: listID; Request Body: at least one property from {name, satisfy_any, pass_auth, items, clients}).
DELETE /nginx/access-lists/{listID} → deleteAccessList: Delete an access list – (Security: BearerAuth "access_lists"; Path: listID).
GET /nginx/certificates → getCertificates: Get all certificates – (Security: BearerAuth "certificates"; Query: expand (enum: [owner])).
POST /nginx/certificates → createCertificate: Create a Certificate – (Security: BearerAuth "certificates"; Request Body required: provider (enum: "letsencrypt" or "other"); optional: nice_name, domain_names (array), meta).
POST /nginx/certificates/validate → validateCertificates: Validate given custom certificates – (Security: BearerAuth "certificates"; Request Body (multipart/form-data) required: certificate, certificate_key; optional: intermediate_certificate).
GET /nginx/certificates/test-http → testHttpReach: Test HTTP Reachability – (Security: BearerAuth "certificates"; Query parameter: domains (string, e.g. JSON array)).
GET /nginx/certificates/{certID} → getCertificate: Get a Certificate – (Security: BearerAuth "certificates"; Path: certID [integer ≥ 1]).
DELETE /nginx/certificates/{certID} → deleteCertificate: Delete a Certificate – (Security: BearerAuth "certificates"; Path: certID).
GET /nginx/certificates/{certID}/download → downloadCertificate: Downloads a Certificate – (Security: BearerAuth "certificates"; Path: certID).
POST /nginx/certificates/{certID}/renew → renewCertificate: Renew a Certificate – (Security: BearerAuth "certificates"; Path: certID).
POST /nginx/certificates/{certID}/upload → uploadCertificate: Upload a custom Certificate – (Security: BearerAuth "certificates"; Path: certID; Request Body (multipart/form-data) required: certificate, certificate_key; optional: intermediate_certificate).
GET /nginx/proxy-hosts → getProxyHosts: Get all proxy hosts – (Security: BearerAuth "proxy_hosts"; Query parameter: expand (enum: [access_list, owner, certificate])).
POST /nginx/proxy-hosts → createProxyHost: Create a Proxy Host – (Security: BearerAuth "proxy_hosts"; Request Body required: domain_names (array), forward_scheme ("http" or "https"), forward_host, forward_port; optional: certificate_id (integer or "new"), ssl_forced, hsts_enabled, hsts_subdomains, http2_support, block_exploits, caching_enabled, allow_websocket_upgrade, access_list_id, advanced_config, enabled, meta, locations).
GET /nginx/proxy-hosts/{hostID} → getProxyHost: Get a Proxy Host – (Security: BearerAuth "proxy_hosts"; Path parameter: hostID [integer ≥ 1]).
PUT /nginx/proxy-hosts/{hostID} → updateProxyHost: Update a Proxy Host – (Security: BearerAuth "proxy_hosts"; Path: hostID; Request Body: similar to createProxyHost, at least one property required).
DELETE /nginx/proxy-hosts/{hostID} → deleteProxyHost: Delete a Proxy Host – (Security: BearerAuth "proxy_hosts"; Path: hostID).
POST /nginx/proxy-hosts/{hostID}/enable → enableProxyHost: Enable a Proxy Host – (Security: BearerAuth "proxy_hosts"; Path: hostID).
POST /nginx/proxy-hosts/{hostID}/disable → disableProxyHost: Disable a Proxy Host – (Security: BearerAuth "proxy_hosts"; Path: hostID).
GET /nginx/redirection-hosts → getRedirectionHosts: Get all redirection hosts – (Security: BearerAuth "redirection_hosts"; Query: expand (enum: [owner, certificate])).
POST /nginx/redirection-hosts → createRedirectionHost: Create a Redirection Host – (Security: BearerAuth "redirection_hosts"; Request Body required: domain_names (array), forward_http_code, forward_scheme ("auto", "http", or "https"), forward_domain_name, preserve_path; optional: certificate_id (integer or "new"), ssl_forced, hsts_enabled, hsts_subdomains, http2_support, block_exploits, advanced_config, enabled, meta).
GET /nginx/redirection-hosts/{hostID} → getRedirectionHost: Get a Redirection Host – (Security: BearerAuth "redirection_hosts"; Path: hostID).
PUT /nginx/redirection-hosts/{hostID} → updateRedirectionHost: Update a Redirection Host – (Security: BearerAuth "redirection_hosts"; Path: hostID; Request Body: at least one property, similar to createRedirectionHost).
DELETE /nginx/redirection-hosts/{hostID} → deleteRedirectionHost: Delete a Redirection Host – (Security: BearerAuth "redirection_hosts"; Path: hostID).
POST /nginx/redirection-hosts/{hostID}/enable → enableRedirectionHost: Enable a Redirection Host – (Security: BearerAuth "redirection_hosts"; Path: hostID).
POST /nginx/redirection-hosts/{hostID}/disable → disableRedirectionHost: Disable a Redirection Host – (Security: BearerAuth "redirection_hosts"; Path: hostID).
GET /nginx/dead-hosts → getDeadHosts: Get all 404 hosts – (Security: BearerAuth "dead_hosts"; Query: expand (enum: [owner, certificate])).
POST /nginx/dead-hosts → create404Host: Create a 404 Host – (Security: BearerAuth "dead_hosts"; Request Body required: domain_names (array); optional: certificate_id, ssl_forced, hsts_enabled, hsts_subdomains, http2_support, advanced_config, meta).
GET /nginx/dead-hosts/{hostID} → getDeadHost: Get a 404 Host – (Security: BearerAuth "dead_hosts"; Path: hostID).
PUT /nginx/dead-hosts/{hostID} → updateDeadHost: Update a 404 Host – (Security: BearerAuth "dead_hosts"; Path: hostID; Request Body: similar to create404Host with at least one property).
DELETE /nginx/dead-hosts/{hostID} → deleteDeadHost: Delete a 404 Host – (Security: BearerAuth "dead_hosts"; Path: hostID).
POST /nginx/dead-hosts/{hostID}/enable → enableDeadHost: Enable a 404 Host – (Security: BearerAuth "dead_hosts"; Path: hostID).
POST /nginx/dead-hosts/{hostID}/disable → disableDeadHost: Disable a 404 Host – (Security: BearerAuth "dead_hosts"; Path: hostID).
GET /nginx/streams → getStreams: Get all streams – (Security: BearerAuth "streams"; Query: expand (enum: [owner, certificate])).
POST /nginx/streams → createStream: Create a Stream – (Security: BearerAuth "streams"; Request Body required: incoming_port, forwarding_host (domain or IPv4/IPv6), forwarding_port; optional: tcp_forwarding, udp_forwarding, certificate_id, meta).
GET /nginx/streams/{streamID} → getStream: Get a Stream – (Security: BearerAuth "streams"; Path: streamID [integer ≥ 1]).
PUT /nginx/streams/{streamID} → updateStream: Update a Stream – (Security: BearerAuth "streams"; Path: streamID; Request Body: similar to createStream, at least one property required).
DELETE /nginx/streams/{streamID} → deleteStream: Delete a Stream – (Security: BearerAuth "streams"; Path: streamID).
POST /nginx/streams/{streamID}/enable → enableStream: Enable a Stream – (Security: BearerAuth "streams"; Path: streamID).
POST /nginx/streams/{streamID}/disable → disableStream: Disable a Stream – (Security: BearerAuth "streams"; Path: streamID).
GET /reports/hosts → reportsHosts: Report on Host Statistics – (Security: BearerAuth "reports"; Response contains counts for proxy, redirection, stream, and dead hosts).
GET /schema → schema: Returns the Swagger API schema – (Public endpoint; no extra options).
GET /settings → getSettings: Get all settings – (Security: BearerAuth "settings"; returns an array of setting objects).
GET /settings/{settingID} → getSetting: Get a setting – (Security: BearerAuth "settings"; Path: settingID [string, e.g. "default-site"]).
PUT /settings/{settingID} → updateSetting: Update a setting – (Security: BearerAuth "settings"; Path: settingID; Request Body: properties value (string, enum: [congratulations, 404, 444, redirect, html]) and meta).
GET /tokens → refreshToken: Refresh your access token – (Security: BearerAuth "tokens"; no additional parameters).
POST /tokens → requestToken: Request a new access token – (Request Body: required identity, secret; optional scope (enum: [user])).
GET /users → getUsers: Get all users – (Security: BearerAuth "users"; Query: expand (enum: [permissions])).
POST /users → createUser: Create a User – (Security: BearerAuth "users"; Request Body required: name, nickname, email; optional: roles, is_disabled, auth (object with type and secret)).
GET /users/{userID} → getUser: Get a user – (Security: BearerAuth "users"; Path: userID [integer or "me"]).
PUT /users/{userID} → updateUser: Update a User – (Security: BearerAuth "users"; Path: userID [integer or "me"]; Request Body: optional updates to name, nickname, email, roles, is_disabled).
DELETE /users/{userID} → deleteUser: Delete a User – (Security: BearerAuth "users"; Path: userID).
PUT /users/{userID}/auth → updateUserAuth: Update a User's Authentication – (Security: BearerAuth "users"; Path: userID [integer or "me"]; Request Body: required type (must be "password"), optional current, and secret).
PUT /users/{userID}/permissions → updateUserPermissions: Update a User's Permissions – (Security: BearerAuth "users"; Path: userID; Request Body: properties visibility (enum: [all, user]), access_lists, dead_hosts, proxy_hosts, redirection_hosts, streams, certificates (each enum: [hidden, view, manage])).
POST /users/{userID}/login → loginAsUser: Login as this user – (Security: BearerAuth "users"; Path: userID; Response includes token, expires, and user object).
